// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20220919151934_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("496ef686-6b83-4c24-9e0f-d6f51b29fad2"),
                            Amount = 6000m,
                            EndDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nya möbler",
                            StartDate = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("ce43e8a5-b655-435f-9dee-f0df2ee936c1")
                        },
                        new
                        {
                            Id = new Guid("d96f9337-0b84-4a79-9977-d27125420898"),
                            Amount = 3000m,
                            EndDate = new DateTime(2022, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Julklappar",
                            StartDate = new DateTime(2022, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("ce43e8a5-b655-435f-9dee-f0df2ee936c1")
                        },
                        new
                        {
                            Id = new Guid("fe0219cc-eb57-417e-b07b-87aa2784a92b"),
                            Amount = 12000m,
                            EndDate = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ny Dator",
                            StartDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("720892b1-b076-49ec-8ec2-88b73040b351")
                        },
                        new
                        {
                            Id = new Guid("7264a099-8b0e-4953-a548-fa62dd2fad4a"),
                            Amount = 1000m,
                            EndDate = new DateTime(2022, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Film o Pizza kväll",
                            StartDate = new DateTime(2022, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("720892b1-b076-49ec-8ec2-88b73040b351")
                        });
                });

            modelBuilder.Entity("DAL.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5959ed9c-f081-45e6-ae2e-aa102c3e5a46"),
                            Name = "Default"
                        },
                        new
                        {
                            Id = new Guid("b78fd823-20cc-49b2-90c5-6e5df0dadbb3"),
                            Name = "Leksaker",
                            UserId = new Guid("ce43e8a5-b655-435f-9dee-f0df2ee936c1")
                        },
                        new
                        {
                            Id = new Guid("2da1939c-8f8f-46f2-819a-3b405311be9d"),
                            Name = "Nöje",
                            UserId = new Guid("720892b1-b076-49ec-8ec2-88b73040b351")
                        },
                        new
                        {
                            Id = new Guid("6cbc9ea2-359d-4035-ad23-f597fb12b31a"),
                            Name = "Räkningar",
                            UserId = new Guid("720892b1-b076-49ec-8ec2-88b73040b351")
                        },
                        new
                        {
                            Id = new Guid("6539ea84-9f69-4c84-a66a-6131ef955749"),
                            Name = "Hemsaker",
                            UserId = new Guid("ce43e8a5-b655-435f-9dee-f0df2ee936c1")
                        });
                });

            modelBuilder.Entity("DAL.Debit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<Guid?>("BudgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Debits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0f7aa59-3111-49f2-8747-b57d44dda0a9"),
                            Amount = 150m,
                            BudgetId = new Guid("d96f9337-0b84-4a79-9977-d27125420898"),
                            CategoryId = new Guid("b78fd823-20cc-49b2-90c5-6e5df0dadbb3"),
                            Comment = "Mjukisdjur",
                            Date = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("ce43e8a5-b655-435f-9dee-f0df2ee936c1")
                        },
                        new
                        {
                            Id = new Guid("05b7512c-2ae6-476e-8f34-cd69202256fd"),
                            Amount = 7000m,
                            BudgetId = new Guid("496ef686-6b83-4c24-9e0f-d6f51b29fad2"),
                            CategoryId = new Guid("6539ea84-9f69-4c84-a66a-6131ef955749"),
                            Comment = "Ny Soffa",
                            Date = new DateTime(2022, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("ce43e8a5-b655-435f-9dee-f0df2ee936c1")
                        },
                        new
                        {
                            Id = new Guid("ae3fc37c-8ccb-4291-8f26-91110afa9e9c"),
                            Amount = 500m,
                            BudgetId = new Guid("d96f9337-0b84-4a79-9977-d27125420898"),
                            CategoryId = new Guid("b78fd823-20cc-49b2-90c5-6e5df0dadbb3"),
                            Comment = "Lego",
                            Date = new DateTime(2022, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("ce43e8a5-b655-435f-9dee-f0df2ee936c1")
                        },
                        new
                        {
                            Id = new Guid("bcc5657f-8ca7-4f90-bf13-3d6c9cf245af"),
                            Amount = 850m,
                            BudgetId = new Guid("496ef686-6b83-4c24-9e0f-d6f51b29fad2"),
                            CategoryId = new Guid("6539ea84-9f69-4c84-a66a-6131ef955749"),
                            Comment = "Ny Köksbord",
                            Date = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("ce43e8a5-b655-435f-9dee-f0df2ee936c1")
                        },
                        new
                        {
                            Id = new Guid("92a98b1e-ce78-45e7-b9a6-889152be1044"),
                            Amount = 1500m,
                            CategoryId = new Guid("5959ed9c-f081-45e6-ae2e-aa102c3e5a46"),
                            Comment = "Storhandla BBQ",
                            Date = new DateTime(2022, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("ce43e8a5-b655-435f-9dee-f0df2ee936c1")
                        },
                        new
                        {
                            Id = new Guid("1aa988b1-98eb-43ca-a52a-12052b8a769d"),
                            Amount = 2500m,
                            BudgetId = new Guid("fe0219cc-eb57-417e-b07b-87aa2784a92b"),
                            CategoryId = new Guid("2da1939c-8f8f-46f2-819a-3b405311be9d"),
                            Comment = "Ny Moderkort",
                            Date = new DateTime(2022, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("720892b1-b076-49ec-8ec2-88b73040b351")
                        },
                        new
                        {
                            Id = new Guid("0109e12c-8f41-47f9-9b6d-816e8b8cca28"),
                            Amount = 8500m,
                            BudgetId = new Guid("fe0219cc-eb57-417e-b07b-87aa2784a92b"),
                            CategoryId = new Guid("2da1939c-8f8f-46f2-819a-3b405311be9d"),
                            Comment = "Ny Grafikkort",
                            Date = new DateTime(2022, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("720892b1-b076-49ec-8ec2-88b73040b351")
                        },
                        new
                        {
                            Id = new Guid("0d73fd40-5a7e-4294-82fc-fdce085d4b46"),
                            Amount = 180m,
                            CategoryId = new Guid("6cbc9ea2-359d-4035-ad23-f597fb12b31a"),
                            Comment = "Spotify",
                            Date = new DateTime(2022, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("720892b1-b076-49ec-8ec2-88b73040b351")
                        },
                        new
                        {
                            Id = new Guid("9c43ecbf-7627-435a-9108-58fd5a85aa86"),
                            Amount = 400m,
                            CategoryId = new Guid("6cbc9ea2-359d-4035-ad23-f597fb12b31a"),
                            Comment = "Bredband",
                            Date = new DateTime(2022, 3, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("720892b1-b076-49ec-8ec2-88b73040b351")
                        },
                        new
                        {
                            Id = new Guid("13eb23c9-e888-4aaf-a5c7-8df3ef64eec4"),
                            Amount = 750m,
                            BudgetId = new Guid("7264a099-8b0e-4953-a548-fa62dd2fad4a"),
                            CategoryId = new Guid("2da1939c-8f8f-46f2-819a-3b405311be9d"),
                            Comment = "Film o Pizza kväll",
                            Date = new DateTime(2022, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("720892b1-b076-49ec-8ec2-88b73040b351")
                        });
                });

            modelBuilder.Entity("DAL.Models.SavingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Savingplans");
                });

            modelBuilder.Entity("DAL.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce43e8a5-b655-435f-9dee-f0df2ee936c1"),
                            Email = "adam_01@hotmail.com",
                            FirstName = "Adam",
                            LastName = "Adamsson",
                            Password = "123"
                        },
                        new
                        {
                            Id = new Guid("720892b1-b076-49ec-8ec2-88b73040b351"),
                            Email = "berit_02@msn.com",
                            FirstName = "Berit",
                            LastName = "Beritsdotter",
                            Password = "123"
                        });
                });

            modelBuilder.Entity("DAL.Budget", b =>
                {
                    b.HasOne("DAL.User", "User")
                        .WithMany("Budgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Category", b =>
                {
                    b.HasOne("DAL.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Debit", b =>
                {
                    b.HasOne("DAL.Budget", "Budget")
                        .WithMany("Debits")
                        .HasForeignKey("BudgetId");

                    b.HasOne("DAL.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("DAL.User", "User")
                        .WithMany("Debits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.SavingPlan", b =>
                {
                    b.HasOne("DAL.User", "User")
                        .WithMany("SavingPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Budget", b =>
                {
                    b.Navigation("Debits");
                });

            modelBuilder.Entity("DAL.User", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Categories");

                    b.Navigation("Debits");

                    b.Navigation("SavingPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
